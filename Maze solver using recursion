#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100        // 미로의 최대 크기를 100으로 정해줍니다.

char **maze;                // 미로를 char 더블 포인터로 2차원 배열을 전역 변수로 만들어 줍니다.
int **passed;               // 이동한 경로를 int 더블 포인터로 2차원 배열을 전역 변수로 만들어 줍니다.
int rows;                   // 미로의 행의 수를 전역 변수로 선언해 줍니다.
int cols;                   // 미로의 열의 수를 전역 변수로 선언해 줍니다.
int start_row;              // 시작 지점의 행을 전역 변수로 선언해 줍니다.
int start_col;              // 시작 지점의 열을 전역 변수로 선언해 줍니다.
int end_row;
int end_col;

// 길, 벽, 출구, 이동 경로를 구분하기 쉽게 열거형을 만들어줍니다.
enum type {
    empty,
    wall,
    end,
    path
};

// 미로에 대한 메모리를 할당해 줍니다. 
void alloc_maze(){
    maze = malloc(rows * sizeof(char *));           // maze 배열에 행의 갯수 만큼 char 포인터의 메모리를 할당해 줍니다.

    for(int i = 0; i < rows; i++){
        maze[i] = malloc(cols * sizeof(char *));    // maze 배열의 각 행마다 열의 갯수 만큼 char 포인터의 메모리를 할당해 줍니다.
    }
}

// input.txt에서 미로를 불러오고 **maze에 저장해 줍니다.
void get_maze(char *file_name){
    FILE *fp1 = fopen(file_name, "r");

    if(fp1 == NULL){
        printf("File doesn't exist\n");
        exit(1);
    }

    char a = getc(fp1);
    int c = 0;                  // 열의 개수를 셀 때 사용합니다.
    int r = 0;                  // 행의 개수를 셀 때 사용합니다.

    while(a != '\n'){                                           // input.txt의 첫 줄을 다 읽을 때까지 반복합니다. 
        if(a == '1' || a == '0' || a == 'E' || a == 'X'){       // 1, 0, E, X 가 나올 때만 열의 수를 늘려줍니다.
            c++;
            a = getc(fp1);                                      // 다음 순서에 있는 문자를 a에 저장해 줍니다.
        }
        else{                                                   // 다른 문자가 있는 경우는 넘어갑니다.
            a = getc(fp1);
            continue;
        }
    }

    cols = c;               // 열의 개수를 전역변수 cols에 저장해 줍니다.

    rewind(fp1);            // 파일 포인터를 input.txt의 처음으로 다시 되돌립니다.

    while(!feof(fp1)){      // 파일을 다 읽을 때까지 반복합니다.
        a = getc(fp1);
        if(a == '\n'){      // 새로운 줄이 있을 때마다 행의 수를 늘려 줍니다. 
            r++;
        }
    }

    rows = r + 1;           // 파일의 끝에는 새로운 줄이 없기 때문에 r + 1을 전역변수 rows에 저장해 줍니다. 

    if(rows > MAX_SIZE || cols > MAX_SIZE){         // 미로의 크기가 100을 넘어가면 프로그램을 멈춥니다.
        printf("Error: Maze size is too big!\n");
        exit(1);
    }

    rewind(fp1);            // 파일 포인터를 input.txt의 처음으로 다시 되돌립니다.

    int file_col = 0;       // input.txt에서 한 줄에 문자의 개수를 셀 때 사용합니다.

    a = getc(fp1);

    while(a != '\n'){       // input.txt에서 한 줄에 문자의 개수를 세줍니다.
        file_col++;
        a = getc(fp1);
    }

    rewind(fp1);            // 파일 포인터를 input.txt의 처음으로 다시 되돌립니다.

    alloc_maze();           // 미로의 크기만큼 동적 메모리를 할당해 줍니다.

    for(int i = 0; i < rows; i++){
        for(int j = 0; j < file_col; j++){
            a = getc(fp1);

            if(a == '\n'){          // \n 이 **maze에 저장되지 않도록 버립니다.
                a = getc(fp1);
            }

            if(a == '1' || a == '0' || a == 'E' || a == 'X'){       // 1, 0, E, X 문자만 **maze에 저장해 줍니다.
                maze[i][(j+1)/2] = a;

                if(a == 'E'){           // 미로의 시작 좌표를 전역 변수에 저장해 줍니다.
                    start_row = i;
                    start_col = (j+1)/2;
                }
                if(a == 'X'){           // 미로의 출구 좌표를 전역 변수에 저장해 줍니다.
                    end_row = i;
                    end_row = (j+1)/2;
                }
            }
            else{
                continue;
            }
        }
    }

    fclose(fp1);            // input.txt를 닫아줍니다.

}

// 미로에서 이동 경로에 대한 메모리를 할당해 줍니다. 
void alloc_passed(){
    passed = malloc(rows * sizeof(int *));
    
    for(int i = 0; i < rows; i++){
        passed[i] = malloc(cols * sizeof(int *));
    }
}

// **passed에 미로의 각 문자를 벽, 출구, 또는 길로 정리해 줍니다.
void get_passed(){
    alloc_passed();

    for(int i = 0; i < rows; i++){
        for(int j = 0; j < cols; j++){
            if(maze[i][j] == '1'){
                passed[i][j] = wall;
            }
            else if(maze[i][j] == 'X'){
                passed[i][j] = end;
            }
            else{
                passed[i][j] = empty;
            }
        }
    }
}

// 시작 좌표를 입력해주면 길을 찾아가는 재귀 함수입니다.
int move(int row, int col){
    int *current = &passed[row][col];               // 입력해준 시작 좌표를 현재 위치로 저장해 줍니다.

    if(*current != wall && *current != path && row >= 0 && col >= 0){
        printf("(%d %d) -> ", row, col);            // 터미널에 좌표를 출력해 줍니다.
    }

    if(*current == end){                            // 출구까지 도착하면 1을 반환합니다.
        return 1;
    }

    if(*current == empty){
        *current = path;                            // 현재 좌표를 지나갔다는 표시를 남깁니다.

        if(move(row, col + 1)){                     // 현재 좌표에서 (0, +1)을 움직였을 때 막히지 않으면 1을 반환합니다.
            *current = path;
            return 1;
        }
        if(move(row, col - 1)){                     // 현재 좌표에서 (0, -1)을 움직였을 때 막히지 않으면 1을 반환합니다.
            *current = path;
            return 1;
        }
        if(move(row + 1, col)){                     // 현재 좌표에서 (+1, 0)을 움직였을 때 막히지 않으면 1을 반환합니다.
            *current = path;
            return 1;
        }
        if(move(row - 1, col)){                     // 현재 좌표에서 (-1, 0)을 움직였을 때 막히지 않으면 1을 반환합니다.
            *current = path;
            return 1;
        }
    }

    return 0;                                       // 길이 막히면 0을 반환합니다.
}

// 시작 지점부터 이동 경로를 표시해 줍니다.
void label_path(){
    for(int i = 0; i < rows; i++){
        for(int j = 0; j < cols; j++){
            if(passed[i][j] == path){
                maze[i][j] = '.';
            }
        }
    }
}

// **maze에 벽은 #로, 길은 띄어쓰기로 바꿔 줍니다.
void change_maze(){
    for(int i = 0; i < rows; i++){
        for(int j = 0; j < cols; j++){
            if(maze[i][j] == '1'){
                maze[i][j] = '#';
            }
            if(maze[i][j] == '0'){
                maze[i][j] = ' ';
            }
        }
    }
}

// output.txt에 미로와 탐색 경로를 출력해 줍니다.
void print_maze(char *file_name, char **maze){
    
    FILE *fp2 = fopen(file_name, "w");

    for(int i = 0; i < rows; i++){
        for(int j = 0; j < cols; j++){
            fprintf(fp2, "%c ", maze[i][j]);        // output.txt에 미로를 출력해 줍니다.
        }
        fprintf(fp2, "\n");
    }
    
    fprintf(fp2, "\n탐색 경로\n");                   // output.txt에 탐색 경로를 출력해 줍니다.

    printf("Start: ");

    if(!move(start_row, start_col)){                // 미로의 출구까지 가지 못 할 때
        label_path();                               // 시작 지점부터 실패하기 전까지 이동 경로를 표시해 줍니다.

        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                fprintf(fp2, "%c ", maze[i][j]);    // output.txt에 미로와 이동 경로를 출력해 줍니다.
            }
            fprintf(fp2, "\n");
        }
        printf("Failed\n");                         // 터미널에 실패라고 출력해 줍니다.
    }
    else{                                           // 미로 탐색을 성공했을 때
        label_path();                               // 시작 지점부터 출구까지 이동 경로를 표시해 줍니다.
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                fprintf(fp2, "%c ", maze[i][j]);    // output.txt에 미로와 이동 경로를 출력해 줍니다.
            }
            fprintf(fp2, "\n");
        }
        printf("Finished\n");                       // 터미널에 성공이라고 출력해 줍니다.
        printf("Maze successfully solved\n");
    }

    fclose(fp2);                                    // output.txt를 닫아줍니다.

}

int main(){
    get_maze("input.txt");              // get_maze() 함수에 input.txt 파일 이름을 넘겨줍니다.

    get_passed();

    change_maze();

    print_maze("output.txt", maze);     //print_maze() 함수에 output.txt와 **maze를 넘겨줍니다.

    return 0;
}
