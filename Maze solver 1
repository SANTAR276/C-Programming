#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100;

char **maze;
int **passed;
int rows;
int cols;
int start_row;
int start_col;
int end_row;
int end_col;

enum type {
    empty,
    wall,
    end,
    path
};

void alloc_maze(){
    maze = malloc(rows * sizeof(char *));

    for(int i = 0; i < rows; i++){
        maze[i] = malloc(cols * sizeof(char *));
    }
}

void get_maze(char *file_name){
    char c;
    char rows_s[3] = { '\0' };
    char cols_s[3] = { '\0' };
    int rows_i = 0;
    int cols_i = 0;
    int swap = 0;

    FILE *fp1 = fopen(file_name, "r");

    if(fp1){
        while((c = getc(fp1)) != EOF){
            if(c == '\n'){
                break;
            }
            else if(c == ','){
                swap = 1;
            }
            else if(!swap){
                rows_s[rows_i] = c;
                rows_i++;
            }
            else{
                cols_s[cols_i] = c;
                cols_i++;
            }
        }
    }

    rows = atoi(rows_s);
    cols = atoi(cols_s);

    alloc_maze();

    for(int i = 0; i < rows; i++){
        for(int j = 0; j< cols; j++){
            c = getc(fp1);

            if(c == '\n'){
                c = getc(fp1);
            }

            maze[i][j] = c;

            if(c == 'E'){
                start_row = i;
                start_col = j;
            }
            if(c == 'X'){
                end_row = i;
                end_row = j;
            }
        }
    }

    fclose(fp1);

}

void alloc_passed(){
    passed = malloc(rows * sizeof(int *));
    
    for(int i = 0; i < rows; ++i){
        passed[i] = malloc(cols * sizeof(int *));
    }
}

void get_passed(){
    alloc_passed();

    for(int i = 0; i < rows; i++){
        for(int j = 0; j < cols; j++){
            if(maze[i][j] == '1'){
                passed[i][j] = wall;
            }
            else if(maze[i][j] == 'X'){
                passed[i][j] = end;
            }
            else{
                passed[i][j] = empty;
            }
        }
    }
}

int direction(int row, int col){
    int *current = &passed[row][col];

    if(*current != wall && *current != path){
        printf("(%d %d) -> ", row, col);
    }

    if(*current == end){
        return 1;
    }

    if(*current == empty){
        *current = path;

        if(direction(row, col - 1)){
            *current = path;
            return 1;
        }
        if(direction(row + 1, col)){
            *current = path;
            return 1;
        }
        if(direction(row, col + 1)){
            *current = path;
            return 1;
        }
        if(direction(row - 1, col)){
            *current = path;
            return 1;
        }
    }

    return 0;
}

void label_path(){
    for(int i = 0; i < rows; i++){
        for(int j = 0; j < cols; j++){
            if(passed[i][j] == path){
                maze[i][j] = '.';
            }
        }
    }
}

void change_maze(){
    for(int i = 0; i < rows; i++){
        for(int j = 0; j < cols; j++){
            if(maze[i][j] == '1'){
                maze[i][j] = '#';
            }
            if(maze[i][j] == '0'){
                maze[i][j] = ' ';
            }
        }
    }
}

void print_maze(char *file_name, char **maze){
    
    FILE *fp2 = fopen(file_name, "w");

    for(int i = 0; i < rows; i++){
        for(int j = 0; j < cols; j++){
            fprintf(fp2, "%c", maze[i][j]);
        }
        fprintf(fp2, "\n");
    }
    
    fprintf(fp2, "\n탐색 경로\n");

    printf("Start: ");

    if(!direction(start_row, start_col)){
        label_path();

        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                fprintf(fp2, "%c", maze[i][j]);
            }
            fprintf(fp2, "\n");
        }
        printf("Failed");
    }
    else{
        label_path();
        
        for(int i = 0; i < rows; i++){
            for(int j = 0; j < cols; j++){
                fprintf(fp2, "%c", maze[i][j]);
            }
            fprintf(fp2, "\n");
        }
        printf("Finished\nMaze successfully solved!");
    }

    fclose(fp2);
}

int main(){
    get_maze("input.txt");
    get_passed();

    change_maze();

    print_maze("output.txt", maze);

    return 0;
}
