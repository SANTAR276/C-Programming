#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

/*
			contents of tests.json file

{
    "Title" : "The Phantom of The Opera",
    "Year" : 1986,
    "Month" : 10,
    "Day" : 9,
    "Genre" : "Musical",
    "Composer" : "Andrew Lloyd Webber",
    "Characters" : [
        "The Phantom of the Opera",
        "Christine Daae",
        "Raoul, Vicomte de Chagny",
        "Madame Giry",
        "Meg Giry"
    ]
}


*/


typedef enum _TOKEN_TYPE{
	TOKEN_STRING,
	TOKEN_NUMBER,
} TOKEN_TYPE;

typedef struct _TOKEN{
	TOKEN_TYPE type;
	union{
		char *string;
		double number;
	};
	bool isArray;
} TOKEN;

#define TOKEN_COUNT 20

typedef struct _JSON{
	TOKEN tokens[TOKEN_COUNT];
} JSON;

char *readFile(char *filename, int *readSize){
	FILE *fp = fopen(filename, "rb");

	if(fp == NULL){
		return NULL;
	}

	int size;
	char *buffer;

	fseek(fp, 0, SEEK_END);
	size = ftell(fp);
	fseek(fp, 0, SEEK_SET);

	buffer = malloc(size + 1);
	memset(buffer, 0, size + 1);

	if(fread(buffer, size, 1, fp) < 1){
		*readSize = 0;
		free(buffer);
		fclose(fp);
		return NULL;
	}

	*readSize = size;

	fclose(fp);

	return buffer;

}

void parseJSON(char *doc, int size, JSON *json){
	int tokenIndex = 0;
	int pos = 0;
	
	if(doc[pos] != '{'){
		return;
	}

	pos++;

	while(pos < size){
		switch(doc[pos]){
			case '"' : {
				char *begin = doc + pos + 1;

				char *end = strchr(begin, '"');

				if(end == NULL){
					break;
				}

				int stringLength = end - begin;

				json->tokens[tokenIndex].type = TOKEN_STRING;
				json->tokens[tokenIndex].string = malloc(stringLength + 1);

				memset(json->tokens[tokenIndex].string, 0, stringLength + 1);

				memcpy(json->tokens[tokenIndex].string, begin, stringLength);

				tokenIndex++;

				pos = pos + stringLength + 1;
			}
			break;

			case '[' : {
				pos++;

				while(doc[pos] != ']'){
					if(doc[pos] == '"'){
						char *begin = doc + pos + 1;

						char *end = strchr(begin, '"');

						if(end == NULL){
							break;
						}

						int stringLength = end - begin;

						json->tokens[tokenIndex].type = TOKEN_STRING;
						json->tokens[tokenIndex].string = malloc(stringLength + 1);
						json->tokens[tokenIndex].isArray = true;

						memset(json->tokens[tokenIndex].string, 0, stringLength + 1);

						memcpy(json->tokens[tokenIndex].string, begin, stringLength);

						tokenIndex++;

						pos = pos + stringLength + 1;
					}
					pos++;
				}
			}
			break;

			case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : 
			case '6' : case '7' : case '8' : case '9' : case '-' : {
				char *begin = doc + pos;
				char *end;
				char *buffer;

				end = strchr(doc + pos, ',');

				if(end == NULL){
					end = strchr(doc + pos, '}');

					if(end == NULL){
						break;
					}
				}

				int stringLength = end - begin;

				buffer = malloc(stringLength + 1);

				memset(buffer, 0, stringLength + 1);

				memcpy(buffer, begin, stringLength);

				json->tokens[tokenIndex].type = TOKEN_NUMBER;
				json->tokens[tokenIndex].number = atof(buffer);

				free(buffer);

				tokenIndex++;

				pos = pos + stringLength + 1;
			}
			break;
		}
		pos++;
	}

}

void freeJSON(JSON *json){
	for(int i = 0; i < TOKEN_COUNT; i++){
		if(json->tokens[i].type == TOKEN_STRING){
			free(json->tokens[i].string);
		}
	}
}

int main(){

	int size;

	char *doc = readFile("tests.json", &size);

	if(doc == NULL){
		return -1;
	}

	JSON json = { 0, };

	parseJSON(doc, size, &json);

	printf("Title: %s\n", json.tokens[1].string);
	printf("Year: %d\n", (int)json.tokens[3].number);
	printf("Month: %d\n", (int)json.tokens[5].number);
	printf("Day: %d\n", (int)json.tokens[7].number);
	printf("Genre: %s\n", json.tokens[9].string);
	printf("Composer: %s\n", json.tokens[11].string);

	printf("Characters: \n");

	printf("\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n", json.tokens[13].string, json.tokens[14].string, json.tokens[15].string, json.tokens[16].string, json.tokens[17].string);

	freeJSON(&json);

	free(doc);

	return 0;
}
