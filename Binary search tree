#include <stdio.h>
#include <stdlib.h>


typedef struct tree{
    int data;
    struct tree *left;
    struct tree *right;
} tree;


tree *new(int num){
    tree *temp = (struct tree *)(malloc(sizeof(tree)));

    temp->data = num;
    temp->left = NULL;
    temp->right = NULL;

    return temp;
}


tree *insert(tree *tree, int data){
    if(tree == NULL){
        return new(data);
    }

    if(data < tree->data){
        tree->left = insert(tree->left, data);
    }
    else{
        tree->right = insert(tree->right, data);
    }

    return tree;
}


tree *min_value(tree *tree){
    struct tree *current = tree;

    while(current && current->left != NULL){
        current = current->left;
    }

    return current;
}


int search(tree *tree, int num){
    if(!tree){
        return 0;
    }
    else if(num < tree->data){
        search(tree->left, num);
    }
    else if(num > tree->data){
        search(tree->right, num);
    }
    else{
        return 1;
    }
}


tree *delete(tree *root, int data){
    int i = search(root, data);
    
    if(i == 1){    
        if(root == NULL){
            return root;
        }

        if(data < root->data){
            root->left = delete(root->left, data);
        }
        else if(data > root->data){
            root->right = delete(root->right, data);
        }
        else{
            if(root->left == NULL){
                tree *temp = root->right;
                free(root);
                return temp;
            }
            else if(root->right == NULL){
                tree *temp = root->left;
                free(root);
                return temp;
            }

            tree *temp = min_value(root->right);

            root->data = temp->data;

            root->right = delete(root->right, temp->data);
        }
        
        return root;
    }
    else{
        printf("Not exist\n");
        return NULL;
    }
}


int height(tree *node){
    if(node == NULL){
        return 0;
    }
    else{
        int left_height = height(node->left);
        int right_height = height(node->right);
        if(left_height > right_height){
            return left_height + 1;
        }
        else{
            return right_height + 1;
        }
    }
}


void current_height(tree *root, int level){
    if(root == NULL){
        return;
    }
    if(level == 1){
        printf("%d, ", root->data);
    }
    else if(level > 1){
        current_height(root->left, level - 1);
        current_height(root->right, level - 1);
    }
}


void level_order(tree *root){
    int h = height(root);
    for(int i = 0; i <= h; i++){
        current_height(root, i);
    }
}


int main(){

    tree *root = NULL;
    char action;
    int num;
    int i;

    FILE *fp1 = fopen("input.txt", "r");
    FILE *fp2 = fopen("output.txt", "w");

    while(feof(fp1) == 0){
        fscanf(fp1, "%c%d", &action, &num);
        getc(fp1);
        switch(action){
            case 'i' :
                printf("%c%d : ", action, num);
                root = insert(root, num);
                level_order(root);
                printf("\n");
                break;
            case 'd' :
                printf("%c%d : ", action, num);
                root = delete(root, num);
                level_order(root);
                printf("\n");
                break;
            case 's' :
                printf("%c%d : ", action, num);
                i = search(root, num);
                if(i == 1){
                    printf("Exist\n");
                }
                else{
                    printf("Not exist\n");
                }
                break;
            default : 
                printf("%c is an invalid operation\n", action);
                exit(1);
        }
    }

    fclose(fp1);
    fclose(fp2);

}
